# -*- coding: utf-8 -*-
"""Project Hacker News.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19nkXuXrixLksxX2f8YcdXbryxzVHt1i4

# Project Hacker News

Hacker News is a site started by the startup incubator Y Combinator, where user-submitted stories (known as "posts") are voted and commented upon, similar to reddit. Hacker News is extremely popular in technology and startup circles, and posts that make it to the top of Hacker News' listings can get hundreds of thousands of visitors as a result.

We're specifically interested in posts whose titles begin with either Ask HN or Show HN. Users submit Ask HN posts to ask the Hacker News community a specific question.

Likewise, users submit Show HN posts to show the Hacker News community a project, product, or just generally something interesting.

We'll compare these two types of posts to determine the following:

Do Ask HN or Show HN receive more comments on average?
Do posts created at a certain time receive more comments on average?
"""

from csv import reader
import pandas as pd

!wget http://bioinf-mw.bihz.upwr.edu.pl/students-data/Data-Cleaning-Advanced/hacker_news.csv

"""Opening data as list of list and as dataframe"""

open_file = open('hacker_news.csv')
read_file = reader(open_file)
hn = list(read_file)
hn_main = hn[1:]
hn_header = hn[:1]
df = pd.DataFrame(hn_main)
df_header = pd.DataFrame(hn_header)

hn_header

df[:5]

"""Function that creates dataframe from given input"""

def dt(aaa):
  dt = pd.DataFrame(aaa)
  return dt

"""Creating an empty lists for separating specific posts"""

ask_posts = []
show_posts = []
other_posts = []

"""Checking if the title of the post starts with 'ask  hn', 'show hn' or other title and appendig this post to correct list"""

for row in hn_main:
  title = row[1]
  title_lower = title.lower()

  if (title_lower.startswith('ask hn')):
    ask_posts.append(row)
  elif (title_lower.startswith('show hn')):
    show_posts.append(row)
  else:
    other_posts.append(row)

dt(other_posts[:5])

"""Checking the number of each post type"""

print('Number of asking posts: ' + str(len(ask_posts)))
print('Number of showing posts: ' + str(len(show_posts)))
print('Number  of other posts: ' + str(len(other_posts)))

"""Counting total number of comments in ask type posts."""

total_ask_comm = 0

for row in ask_posts:
  comms = int(row[4])
  total_ask_comm += comms

print('Total number of ask type posts comments: ' + str(total_ask_comm))

"""Computing average number of comments of ask type posts comments"""

avg_ask_comm =round(total_ask_comm/len(ask_posts))
print('Avergae number of ask type posts comments: ' + str(avg_ask_comm))

"""Counting total number of comments in show type posts."""

total_show_comms = 0

for row in show_posts:
  comms = int(row[4])
  total_show_comms += comms

print('Total number of show type posts comments: ' + str(total_show_comms))

"""Computing average number of comments of show type posts comments"""

avg_show_comms = round(total_show_comms/(len(show_posts)))
print('Avergae number of show type posts comments: ' + str(avg_show_comms))

"""Counting total number of comments in other type posts."""

total_other_comm = 0

for row in other_posts:
    comms = int(row[4])
    total_other_comm = total_other_comm + comms
    
print('Total number of other type posts comments: ' + str(total_other_comm))

"""Computing average number of comments of other type posts comments"""

avg_other_comm = round(total_other_comm/(len(other_posts)))
print('Avergae number of other type posts comments: ' + str(avg_other_comm))

dt(ask_posts[:5])

import datetime as dtime

"""Creating lists that shows time when post was added with total numbers of comments"""

result_ask_list = []
for row in ask_posts:
  created_at = row[6]
  comms = int(row[4])
  result_ask_list.append([created_at, comms])

"""Creating dictionaries that contains the number of ask posts created during each hour of the day and corresponding number of comments ask posts created at each hour received.

"""

ask_counts_by_hour = {}
ask_comms_by_hour = {}

for row in result_ask_list:
  date = row[0]
  comms = row[1]
  hour = dtime.datetime.strptime(date, '%m/%d/%Y %H:%M').strftime('%H')

  if hour not in ask_counts_by_hour:
    ask_comms_by_hour[hour] = comms
    ask_counts_by_hour[hour] = 1
  else:
    ask_comms_by_hour[hour] += comms
    ask_counts_by_hour[hour] += 1

"""Creating a list that contains averge number of comments for each hour"""

ask_avg_by_hour = []
for row in ask_comms_by_hour:
  ask_avg_by_hour.append([row, ask_comms_by_hour[row]/ask_counts_by_hour[row]])

"""Swaping columns, so we can sort the list by averge comments in decending order"""

swap_ask_avg_by_hour = []
for row in ask_avg_by_hour:
  swap_ask_avg_by_hour.append([row[1], row[0]])
  
sorted_swap_ask_avg_by_hour = sorted(swap_ask_avg_by_hour, reverse = True)

"""Printing hours with the averge numbers of comments using str.format method"""

for row in sorted_swap_ask_avg_by_hour[:5]:
    hour = dtime.datetime.strptime(row[1], "%H").strftime("%H:%M")
    print(f"{hour}: {row[0]:.2f} average comments per post.")

"""A chance to recive a higher number of comments occurs if you post the question at 15.00

Creating lists that shows time when post was added with total numbers of comments
"""

result_show_list = []
for row in show_posts:
    created_at = row[6]
    comms = int(row[4])
    result_show_list.append([created_at, comms])

"""Creating dictionaries that contains the number of show posts created during each hour of the day and corresponding number of comments show posts created at each hour received."""

show_counts_by_hour = {}
show_comms_by_hour = {}

for row in result_show_list:
    date = row[0]
    comms = row[1]
    hour = dtime.datetime.strptime(date, '%m/%d/%Y %H:%M').strftime('%H')
    
    if hour not in show_counts_by_hour:
        show_comms_by_hour[hour] = comms
        show_counts_by_hour[hour] = 1
    else:
        show_comms_by_hour[hour] += comms
        show_counts_by_hour[hour] += 1

"""Creating a list that contains averge number of comments for each hour """

show_avg_by_hour = []
for row in show_comms_by_hour:
    show_avg_by_hour.append([row, show_comms_by_hour[row]/ show_counts_by_hour[row]])

"""Swaping columns, so we can sort the list by averge comments in decending order"""

swap_show_avg_by_hour = []
for row in show_avg_by_hour:
    swap_show_avg_by_hour.append([row[1],row[0]])

sorted_swap_show_avg_by_hour = sorted(swap_show_avg_by_hour, reverse = True)

"""Printing hours with the averge numbers of comments using str.format method"""

for row in sorted_swap_show_avg_by_hour[:5]:
    hour = dtime.datetime.strptime(row[1], "%H").strftime("%H:%M")
    print(f"{hour}: {row[0]:.2f} average comments per post.")

"""A chance to recive a higher number of comments occurs if you post your thing at 18.00

Creating lists that shows time when post was added with total numbers of comments
"""

result_other_list = []
for row in other_posts:
    created_at = row[6]
    comms = int(row[4])
    result_other_list.append([created_at, comms])

"""Creating dictionaries that contains the number of other posts created during each hour of the day and corresponding number of comments other posts created at each hour received."""

other_counts_by_hour = {}
other_comms_by_hour = {}

for row in result_other_list:
    date = row[0]
    comms = row[1]
    hour = dtime.datetime.strptime(date, '%m/%d/%Y %H:%M').strftime('%H')
    
    if hour not in other_counts_by_hour:
        other_comms_by_hour[hour] = comms
        other_counts_by_hour[hour] = 1
    else:
        other_comms_by_hour[hour] += comms
        other_counts_by_hour[hour] += 1

"""Creating a list that contains averge number of comments for each hour  """

other_avg_by_hour = []

for row in other_comms_by_hour:
  other_avg_by_hour.append([row, other_comms_by_hour[row]/other_counts_by_hour[row]])

"""Swaping columns, so we can sort the list by averge comments in decending order"""

swap_other_avg_by_hour = []

for row in other_avg_by_hour:
  swap_other_avg_by_hour.append([row[1],row[0]])

sorted_swap_other_avg_by_hour = sorted(swap_other_avg_by_hour, reverse = True)

"""Printing hours with the averge numbers of comments using str.format method"""

for row in sorted_swap_other_avg_by_hour[:5]:
  hour = dtime.datetime.strptime(row[1], '%H').strftime('%H:%M')
  print(f"{hour}: {row[0]:.2f} average comments per post.")

"""A chance to recive a higher number of comments occurs if you post other type posts at 14.00

**Summary**

The data contains:
* 1744 asking posts
* 1162 showig posts
* 17193 other posts

 - Total number of ask type posts comments is 24483 with the
average number of comments = 14.
A chance to recive a higher number of comments occurs if you post the question at 15.00

 - Total number of show type posts comments is 11988 with the
average number of comments = 10. A chance to recive a higher number of comments occurs if you post your thing at 18.00

 - Total number of other type posts comments is 462045 with the
average number of comments = 27. A chance to recive a higher number of comments occurs if you post other type posts at 14.00
"""

